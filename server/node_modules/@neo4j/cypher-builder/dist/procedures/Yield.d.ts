import { Clause } from "@neo4j/cypher-builder/src/clauses/Clause";
import { WithReturn } from "@neo4j/cypher-builder/src/clauses/mixins/WithReturn";
import { WithWhere } from "@neo4j/cypher-builder/src/clauses/mixins/WithWhere";
import { WithWith } from "@neo4j/cypher-builder/src/clauses/mixins/WithWith";
import { Projection } from "@neo4j/cypher-builder/src/clauses/sub-clauses/Projection";
import type { CypherEnvironment } from "@neo4j/cypher-builder/src/Environment";
import type { Literal } from "@neo4j/cypher-builder/src/references/Literal";
import type { Variable } from "@neo4j/cypher-builder/src/references/Variable";
export type YieldProjectionColumn<T extends string> = T | [T, Variable | Literal];
export interface Yield extends WithReturn, WithWhere, WithWith {
}
/** Yield statement after a Procedure CALL
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/call/#call-call-a-procedure-call-yield-star)
 * @group Expressions
 * @category Procedures
 */
export declare class Yield extends Clause {
    private projection;
    constructor(yieldColumns: Array<"*" | YieldProjectionColumn<any>>);
    /** @internal */
    getCypher(env: CypherEnvironment): string;
}
export declare class YieldProjection extends Projection {
    constructor(columns: Array<"*" | YieldProjectionColumn<string>>);
    private parseYieldColumn;
    private createVariableForStrings;
}
//# sourceMappingURL=Yield.d.ts.map