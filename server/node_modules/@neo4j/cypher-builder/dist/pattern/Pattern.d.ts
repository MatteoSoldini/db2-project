import type { CypherEnvironment } from "@neo4j/cypher-builder/src/Environment";
import type { NodeRef } from "@neo4j/cypher-builder/src/references/NodeRef";
import type { Param } from "@neo4j/cypher-builder/src/references/Param";
import { RelationshipRef } from "@neo4j/cypher-builder/src/references/RelationshipRef";
import { PartialPattern } from "@neo4j/cypher-builder/src/pattern/PartialPattern";
import { PatternElement } from "@neo4j/cypher-builder/src/pattern/PatternElement";
/** Represents a pattern of a single node or n-relationships to be used in clauses.
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/patterns/)
 * @group Patterns
 */
export declare class Pattern extends PatternElement<NodeRef> {
    private withLabels;
    private withVariable;
    private previous;
    private properties;
    private pathVariable;
    constructor(node: NodeRef, previous?: PartialPattern);
    withoutLabels(): this;
    withoutVariable(): this;
    withProperties(properties: Record<string, Param>): this;
    related(rel?: RelationshipRef): PartialPattern;
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
    private getNodeLabelsString;
}
//# sourceMappingURL=Pattern.d.ts.map