import type { PropertyRef } from "@neo4j/cypher-builder/src/references/PropertyRef";
import type { CypherFunction } from "@neo4j/cypher-builder/src/expressions/functions/CypherFunctions";
import type { Literal } from "@neo4j/cypher-builder/src/references/Literal";
import type { Exists } from "@neo4j/cypher-builder/src/expressions/Exists";
import type { CypherEnvironment } from "@neo4j/cypher-builder/src/Environment";
import type { MapExpr } from "@neo4j/cypher-builder/src/expressions/map/MapExpr";
import type { BooleanOp } from "@neo4j/cypher-builder/src/expressions/operations/boolean";
import type { ComparisonOp } from "@neo4j/cypher-builder/src/expressions/operations/comparison";
import type { RawCypher } from "@neo4j/cypher-builder/src/clauses/RawCypher";
import type { PredicateFunction } from "@neo4j/cypher-builder/src/expressions/functions/PredicateFunctions";
import type { Case } from "@neo4j/cypher-builder/src/expressions/Case";
import type { MathOp } from "@neo4j/cypher-builder/src/expressions/operations/math";
import type { ListComprehension } from "@neo4j/cypher-builder/src/expressions/list/ListComprehension";
import type { PatternComprehension } from "@neo4j/cypher-builder/src/expressions/list/PatternComprehension";
import type { ListExpr } from "@neo4j/cypher-builder/src/expressions/list/ListExpr";
import type { MapProjection } from "@neo4j/cypher-builder/src/expressions/map/MapProjection";
import type { HasLabel } from "@neo4j/cypher-builder/src/expressions/HasLabel";
import type { Reference } from "@neo4j/cypher-builder/src/references/Reference";
import type { ApocFunction } from "@neo4j/cypher-builder/src/apoc/types";
import type { ListIndex } from "@neo4j/cypher-builder/src/expressions/list/ListIndex";
import type { Path } from "@neo4j/cypher-builder/src/references/Path";
export type Operation = BooleanOp | ComparisonOp | MathOp;
/** Represents a Cypher Expression
 *  @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/expressions/)
 */
export type Expr = Operation | Reference | Literal | PropertyRef | CypherFunction | Predicate | ListComprehension | PatternComprehension | MapExpr | MapProjection | ListExpr | ListIndex | ApocFunction | Case<ComparisonOp> | Path;
/** Represents a predicate statement (i.e returns a boolean). Note that RawCypher is only added for compatibility */
export type Predicate = BooleanOp | ComparisonOp | RawCypher | Exists | PredicateFunction | Literal<boolean> | Case | HasLabel;
export type CypherResult = {
    cypher: string;
    params: Record<string, string>;
};
/** Defines the interface for a class that can be compiled into Cypher */
export interface CypherCompilable {
    getCypher(env: CypherEnvironment): string;
}
//# sourceMappingURL=types.d.ts.map